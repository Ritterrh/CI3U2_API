const express = require('express');
const router = express.Router();
const { checkRole, authenticateJWT } = require('../middleware/verfiytoken');
const Gallery = require('../models/Gallery');
const { isAutoGenerated } = require('../middleware/isAutoGenerated');
const fs = require('fs');
const path = require('path');
const multer = require('multer');

// Middleware for handling image uploads
const galleryImageStorage = multer.diskStorage({
    destination: '../public/gallery_images',
    filename: function (req, file, cb) {
        cb(null, `${Date.now()}${path.extname(file.originalname)}`);
    },
});

const uploadGalleryImage = multer({
    storage: galleryImageStorage,
    fileFilter: function (req, file, cb) {
        checkFileType(file, cb);
    },
}).single('image');

// Get all Galleries (filtered by role and public galleries)
router.get('/galleries', async (req, res) => {
    try {
        const userRole = req.user ? req.user.role : 'public';

        if (userRole === 'admin' || userRole === 'team') {
            // Show all galleries for admin or team users
            const galleries = await Gallery.find();
            res.json(galleries);
        } else {
            // Filter galleries by role: public or user's role for other users (public users)
            const galleries = await Gallery.find({ $or: [{ role: 'public' }, { role: userRole }] });
            res.json(galleries);
        }
    } catch (err) {
        console.error('Error getting Galleries:', err);
        res.status(500).json({ message: 'An error occurred while fetching Galleries.' });
    }
});

// Create Gallery
router.post('/galleries', authenticateJWT, checkRole(['admin', 'team']), async (req, res) => {
    uploadGalleryImage(req, res, async function (err) {
        if (err) {
            return res.status(400).json({ message: err });
        }

        const { title, tag } = req.body;
        const role = isAutoGenerated(title) ? 'Auto-generated' : title;
        const frontIMG = req.file ? `/gallery_images/${req.file.filename}` : '';

        try {
            const gallery = new Gallery({
                title,
                frontIMG,
                tag,
                role,
            });

            await gallery.save();

            res.json({ message: 'Gallery created successfully', gallery });
        } catch (err) {
            console.error('Error creating Gallery:', err);
            res.status(500).json({ message: 'An error occurred while creating the Gallery.' });
        }
    });
});

// Edit Gallery
router.put('/galleries/:id', authenticateJWT, checkRole(['admin', 'team']), async (req, res) => {
    const { id } = req.params;

    uploadGalleryImage(req, res, async function (err) {
        if (err) {
            return res.status(400).json({ message: err });
        }

        try {
            const gallery = await Gallery.findById(id);
            if (!gallery) {
                return res.status(404).json({ message: 'Gallery not found' });
            }

            if (isAutoGenerated(gallery.title)) {
                return res.status(403).json({ message: 'Auto-generated Galleries cannot be edited' });
            }

            if (req.file && gallery.frontIMG) {
                fs.unlinkSync(`../public${gallery.frontIMG}`);
            }

            gallery.title = req.body.title;
            gallery.tag = req.body.tag;
            gallery.role = isAutoGenerated(gallery.title) ? 'Auto-generated' : req.body.title;
            gallery.frontIMG = req.file ? `/gallery_images/${req.file.filename}` : gallery.frontIMG;
            await gallery.save();

            res.json({ message: 'Gallery updated successfully', gallery });
        } catch (err) {
            console.error('Error updating Gallery:', err);
            res.status(500).json({ message: 'An error occurred while updating the Gallery.' });
        }
    });
});

// Delete Gallery
router.delete('/galleries/:id', authenticateJWT, checkRole(['admin', 'team']), async (req, res) => {
    const { id } = req.params;

    try {
        const gallery = await Gallery.findById(id);
        if (!gallery) {
            return res.status(404).json({ message: 'Gallery not found' });
        }

        if (isAutoGenerated(gallery.title)) {
            return res.status(403).json({ message: 'Auto-generated Galleries cannot be deleted' });
        }

        if (gallery.frontIMG) {
            fs.unlinkSync(`../public${gallery.frontIMG}`);
        }

        await gallery.remove();

        res.json({ message: 'Gallery deleted successfully' });
    } catch (err) {
        console.error('Error deleting Gallery:', err);
        res.status(500).json({ message: 'An error occurred while deleting the Gallery.' });
    }
});

// Pr√ºfe, ob das Hochgeladene Datei ein Bild ist
function checkFileType(file, cb) {
    const filetypes = /jpeg|jpg|png|gif/;
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = filetypes.test(file.mimetype);
    if (extname && mimetype) {
        return cb(null, true);
    } else {
        cb('Error: Images Only!');
    }
}

module.exports = router;
