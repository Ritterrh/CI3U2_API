const express = require('express');
const router = express.Router();
const { checkRole, authenticateJWT } = require('../middleware/verfiytoken'); // Import the middleware for authentication and role check
const Tag = require('../models/Tag');

/*
        ---------------------
        Tags
        ---------------------
 */
// Get all tags
router.get('/tags', async (req, res) => {
    try {
        const tags = await Tag.find();
        res.json(tags);
    } catch (err) {
        console.error('Error getting tags:', err);
        res.status(500).json({ message: 'An error occurred while fetching tags.' });
    }
});

// Create a new tag (Only for Team and Admin)
router.post('/tags', authenticateJWT, checkRole(['admin', 'team']), async (req, res) => {
    const { name } = req.body;

    try {
        const existingTag = await Tag.findOne({ name });
        if (existingTag) {
            return res.status(400).json({ message: 'Tag with this name already exists' });
        }

        const tag = new Tag({ name });
        await tag.save();

        res.json({ message: 'Tag created successfully', tag });
    } catch (err) {
        console.error('Error creating tag:', err);
        res.status(500).json({ message: 'An error occurred while creating the tag.' });
    }
});

// Update a tag (Only for Team and Admin)
router.put('/tags/:id', authenticateJWT, checkRole(['admin', 'team']), async (req, res) => {
    const { id } = req.params;
    const { name } = req.body;

    try {
        const tag = await Tag.findById(id);
        if (!tag) {
            return res.status(404).json({ message: 'Tag not found' });
        }

        if (tag.isAutoGenerated) {
            return res.status(403).json({ message: 'Auto-generated tags cannot be edited' });
        }

        tag.name = name;
        await tag.save();

        res.json({ message: 'Tag updated successfully', tag });
    } catch (err) {
        console.error('Error updating tag:', err);
        res.status(500).json({ message: 'An error occurred while updating the tag.' });
    }
});

// Delete a tag (Only for Team and Admin)
router.delete('/tags/:id', authenticateJWT, checkRole(['admin', 'team']), async (req, res) => {
    const { id } = req.params;

    try {
        const tag = await Tag.findById(id);
        if (!tag) {
            return res.status(404).json({ message: 'Tag not found' });
        }

        if (tag.isAutoGenerated) {
            return res.status(403).json({ message: 'Auto-generated tags cannot be deleted' });
        }

        await tag.remove();

        res.json({ message: 'Tag deleted successfully' });
    } catch (err) {
        console.error('Error deleting tag:', err);
        res.status(500).json({ message: 'An error occurred while deleting the tag.' });
    }
});

module.exports = router;
