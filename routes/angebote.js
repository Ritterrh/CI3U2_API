const express = require('express');
const router = express.Router();
const { checkRole, authenticateJWT } = require('../middleware/verfiytoken');
const Angebot = require('../models/Angebot');
const Gallery = require('../models/Gallery');
const { isAutoGenerated } = require('../middleware/isAutoGenerated');
const fs = require('fs');
const path = require('path');
const multer = require('multer');

// Middleware for handling image uploads
const angebotImageStorage = multer.diskStorage({
    destination: '../public/angebot_images',
    filename: function (req, file, cb) {
        cb(null, `${Date.now()}${path.extname(file.originalname)}`);
    },
});

const uploadAngebotImage = multer({
    storage: angebotImageStorage,
    fileFilter: function (req, file, cb) {
        checkFileType(file, cb);
    },
}).single('image');

// Get all Angebote
router.get('/angebote', async (req, res) => {
    try {
        const angebote = await Angebot.find();
        res.json(angebote);
    } catch (err) {
        console.error('Error getting Angebote:', err);
        res.status(500).json({ message: 'An error occurred while fetching Angebote.' });
    }
});

// Create Angebot with associated Gallery
router.post('/angebote', authenticateJWT, checkRole(['admin', 'team']), async (req, res) => {
    // The checkRole middleware will allow only 'admin' or 'team' roles to proceed with creating Angebote

    uploadAngebotImage(req, res, async function (err) {
        if (err) {
            return res.status(400).json({ message: err });
        }

        const { title, description, fromDate, fromTime, toDate, toTime, price, infoText } = req.body;
        const tag = isAutoGenerated(title) ? 'Auto-generated' : title;
        const role = isAutoGenerated(title) ? 'Auto-generated' : title;
        const imageUrl = req.file ? `/angebot_images/${req.file.filename}` : '';

        try {
            const angebot = new Angebot({
                tag,
                role,
                title,
                description,
                fromDate,
                fromTime,
                toDate,
                toTime,
                price,
                infoText,
                imageUrl,
            });

            await angebot.save();

            // Create or update the associated gallery
            const galleryData = {
                title: angebot.title,
                frontIMG: angebot.imageUrl,
                role: angebot.role,
                tag: `${angebot.title} - Auto-generated`,
            };

            const existingGallery = await Gallery.findOneAndUpdate({ title: angebot.title }, galleryData, {
                new: true,
                upsert: true,
            });

            res.json({ message: 'Angebot created successfully', angebot, gallery: existingGallery });
        } catch (err) {
            console.error('Error creating Angebot:', err);
            res.status(500).json({ message: 'An error occurred while creating the Angebot.' });
        }
    });
});

// Edit Angebot and associated Gallery
router.put('/angebote/:id', authenticateJWT, checkRole(['admin', 'team']), async (req, res) => {
    // The checkRole middleware will allow only 'admin' or 'team' roles to proceed with editing Angebote

    const { id } = req.params;

    uploadAngebotImage(req, res, async function (err) {
        if (err) {
            return res.status(400).json({ message: err });
        }

        try {
            const angebot = await Angebot.findById(id);
            if (!angebot) {
                return res.status(404).json({ message: 'Angebot not found' });
            }

            // Check if the tag and role were auto-generated based on the title
            const isTagAutoGenerated = isAutoGenerated(angebot.title);

            // Remove the old image from the server if a new image is uploaded
            if (req.file && angebot.imageUrl) {
                fs.unlinkSync(`../public${angebot.imageUrl}`);
            }

            // Update the Angebot properties
            angebot.title = req.body.title;
            angebot.description = req.body.description;
            angebot.fromDate = req.body.fromDate;
            angebot.fromTime = req.body.fromTime;
            angebot.toDate = req.body.toDate;
            angebot.toTime = req.body.toTime;
            angebot.price = req.body.price;
            angebot.infoText = req.body.infoText;

            // Don't update the tag and role, as they are auto-generated
            angebot.imageUrl = req.file ? `/angebot_images/${req.file.filename}` : angebot.imageUrl; // Use the new image URL if uploaded, otherwise keep the old one
            await angebot.save();

            // Create or update the associated gallery
            const galleryData = {
                title: angebot.title,
                frontIMG: angebot.imageUrl,
            };

            if (!isTagAutoGenerated) {
                galleryData.role = angebot.title;
                galleryData.tag = `${angebot.title} - Auto-generated`;
            }

            const existingGallery = await Gallery.findOneAndUpdate({ title: angebot.title }, galleryData, {
                new: true,
                upsert: true,
            });

            res.json({ message: 'Angebot updated successfully', angebot, gallery: existingGallery });
        } catch (err) {
            console.error('Error updating Angebot:', err);
            res.status(500).json({ message: 'An error occurred while updating the Angebot.' });
        }
    });
});

// Delete Angebot and associated Gallery
router.delete('/angebote/:id', authenticateJWT, checkRole(['admin', 'team']), async (req, res) => {
    // The checkRole middleware will allow only 'admin' or 'team' roles to proceed with deleting Angebote

    const { id } = req.params;

    try {
        const angebot = await Angebot.findById(id);
        if (!angebot) {
            return res.status(404).json({ message: 'Angebot not found' });
        }

        // Remove the image from the server
        if (angebot.imageUrl) {
            fs.unlinkSync(`../public${angebot.imageUrl}`);
        }

        // Update the associated gallery's tag and role
        await Gallery.findOneAndUpdate({ title: angebot.title }, { $unset: { tag: 1, role: 1 } });

        // Delete the associated gallery
        await Gallery.findOneAndDelete({ title: angebot.title });

        await angebot.remove();

        res.json({ message: 'Angebot deleted successfully' });
    } catch (err) {
        console.error('Error deleting Angebot:', err);
        res.status(500).json({ message: 'An error occurred while deleting the Angebot.' });
    }
});
// ...

// Pr√ºfe, ob das Hochgeladene Datei ein Bild ist
function checkFileType(file, cb) {
    const filetypes = /jpeg|jpg|png|gif/;
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = filetypes.test(file.mimetype);
    if (extname && mimetype) {
        return cb(null, true);
    } else {
        cb('Error: Images Only!');
    }
}

module.exports = router;
