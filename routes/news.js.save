const express = require('express');
const router = express.Router();
const { checkRole, authenticateJWT } = require('../middleware/verfiytoken');
const News = require('../models/News');
const { isAutoGenerated } = require('../middleware/isAutoGenerated');
const fs = require('fs');
const path = require('path');
const multer = require('multer');
const my = require('mysql');
const {RowDataPacket} = require("mysql/lib/protocol/packets");
require('dotenv').config();

const host = process.env.DATENBANK_HOST;
const db = process.env.DATENBANK;
const user = process.env.DATENBANK_USER;
const pw = process.env.DATENBANK_PASS;




const con = my.createConnection(
    {
        host: host,
        database: db,
        user: user,
        password: pw,
    }
);
con.connect(function (err) {
    if (err) throw err;
    console.log("Connected!");
});


// Middleware for handling image uploads
const newsImageStorage = multer.diskStorage({
    destination: path.join(__dirname, '../public/news_images'), // Use absolute path for the destination
    filename: function (req, file, cb) {
        cb(null, `${Date.now()}${path.extname(file.originalname)}`);
    },
});

const uploadNewsImage = multer({
    storage: newsImageStorage,
    fileFilter: function (req, file, cb) {
        checkFileType(file, cb);
    },
}).single('image');

/*
        ---------------------
        News
        ---------------------
 */
// Get all news
router.get('/news', async (req, res) => {
    try {
        const news = await News.find();
        res.json(news);
    } catch (err) {
        console.error('Error getting news:', err);
        res.status(500).json({ message: 'An error occurred while fetching news.' });
    }
	});

router.get('/game', async (req, res) => {
    try {
        const Spiel_Id = 1;
        await con.query('SELECT' +
            ' s.spiel_name,' +
            ' s.spiel_reals_date,' +
            ' s.spiel_preis,' +
            ' f.FS_alter,' +
            ' st.ST_anzahl,' +
            ' bp.PB_name,' +
            ' e.EN_name,' +
            ' gb.GE_name,' +
            ' GROUP_CONCAT(k.KO_name) AS Plattformen' +

            ' from spiel s' +

	            ' JOIN BK.sterne st  ON  s.spiel_sterne = st.SID' +
            ' JOIN BK.fsk f ON s.spiel_fsk = f.FID' +

            ' JOIN spiel_genere g ON  s.spiel_id = g.SPID' +
            ' JOIN BK.genere gb ON g.SPID = gb.GID' +

            ' JOIN spiel_publisher pb ON  s.spiel_id = pb.SPID' +
            ' JOIN BK.publisher bp ON pb.PID = bp.PID' +
	
            ' JOIN spiel_entwickler se ON  s.spiel_id = se.SPID' +
            ' JOIN BK.entwickler e ON se.EID = e.EID' +

            ' JOIN spiel_plattform p ON s.spiel_id = p.Spiel_ID' +
            ' JOIN BK.konsole k on p.Konsole_Id = k.KID' +
        	    ' WHERE s.spiel_id = ?', [Spiel_Id], async (err, rows) => {
            if (err) {
                console.error(err);
                return;
            }

            let result = Object.values(JSON.parse(JSON.stringify(rows)));
            console.log(result);
            res.status(200).json(result);
        })
    } catch (err) {
        console.error('Error creating news:', err);
        res.status(500).json({ message: 'An error occurred while creating the news.' });
    }
})

// Create news
router.post('/news', async (req, res) => {
    // The checkRole middleware will allow only 'admin' or 'team' roles to proceed with creating news
    console.log("newss kann erstellt werden");
    uploadNewsImage(req, res, async function (err) {
        if (err) {
            return res.status(400).json({ message: err });
        }

         const  { tag, title, content  } =await req.body;
         const imageUrl =await req.file ? `/news_images/${req.file.filename}` : '';

         try{
            // Generate auto-generated tag based on the title


            // Get the name of the user who created the news
            const userName =await req.userId; // Assuming the user object has a "name" property

            const news = await News({
                title,
                date: new Date(),
                content,
                imageUrl,
                createdBy: userName,
            });

            await news.save();

            res.json({ message: 'News created successfully', news });
        } catch (err) {
            console.error('Error creating news:', err);
            res.status(500).json({ message: 'An error occurred while creating the news.' });
        }
    });
});


// Edit news
router.put('/news/:id', async (req, res) => {
    // The checkRole middleware will allow only 'admin' or 'team' roles to proceed with editing news

    const { id } = req.params;
    const { tag, title, content } = req.body;

    uploadNewsImage(req, res, async function (err) {
        if (err) {
            return res.status(400).json({ message: err });
        }

        try {
            const news = await News.findById(id);
            if (!news) {
                return res.status(404).json({ message: 'News not found' });
            }

            // Check if the news was auto-generated based on the title
            if (isAutoGenerated(news.title)) {
                return res.status(403).json({ message: 'Auto-generated news cannot be edited' });
            }

            // Remove the old image from the server if a new image is uploaded
            if (req.file && news.imageUrl) {
                fs.unlinkSync(`../public${news.imageUrl}`);
            }

            // Update the news properties
            news.tag = tag;
            news.title = title;
            news.content = content;
            news.imageUrl = req.file ? `/news_images/${req.file.filename}` : news.imageUrl; // Use the new image URL if uploaded, otherwise keep the old one
            await news.save();

            res.json({ message: 'News updated successfully', news });
        } catch (err) {
            console.error('Error updating news:', err);
            res.status(500).json({ message: 'An error occurred while updating the news.' });
        }
    });
});

// Delete news
router.delete('/news/:id', async (req, res) => {
    // The checkRole middleware will allow only 'admin' or 'team' roles to proceed with deleting news

    const { id } = req.params;

    try {
        const news = await News.findById(id);
        if (!news) {
            return res.status(404).json({ message: 'News not found' });
        }

        // Check if the news was auto-generated based on the title
        if (isAutoGenerated(news.title)) {
            return res.status(403).json({ message: 'Auto-generated news cannot be deleted' });
        }

        // Remove the image from the server
       // if (news.imageUrl) {
       //    fs.unlinkSync(`../public${news.imageUrl}`);
       // }
        console.log("Nes wird jetezt geschlöscht")
        await news.deleteOne();

        console.log("New wurde geschlöscht")

        res.json({ message: 'News deleted successfully' });
    } catch (err) {
        console.error('Error deleting news:', err);
        res.status(500).json({ message: 'An error occurred while deleting the news.' });
    }
});


function checkFileType(file, cb) {
    const filetypes = /jpeg|jpg|png|gif/;
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = filetypes.test(file.mimetype);
    if (extname && mimetype) {
        return cb(null, true);
    } else {
        cb('Error: Images Only!');
    }
}

// Serve static files from the 'public' folder
router.use(express.static(path.join(__dirname, '../public/news_images')));
module.exports = router;
